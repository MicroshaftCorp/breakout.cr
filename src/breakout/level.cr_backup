require "crsfml"
require "./block.cr"

module Breakout
  class Level
    include SF::Drawable

    def initialize
      # Player
      @player = Player.new(SF.vector2f(PLAYER_SIZE_X, PLAYER_SIZE_Y))
      @player.position = {(WINDOW_SIZE_X - PLAYER_SIZE_X) / 2, WINDOW_SIZE_Y - MARGIN_BOTTOM - PLAYER_SIZE_Y}
      @player.fill_color = SF::Color.new(128, 128, 128)
      # Blocks
      # @blocks = [] of Block
      @blocks = Array(Block).new(30) { Block.new(SF.vector2f(BLOCK_SIZE_X, BLOCK_SIZE_Y)) }
      @blocks.map_with_index do |block, index|
        block.position = {MARGIN_SIDE + (index % BLOCK_COUNT_X) * block.size.x, MARGIN_TOP + (index % BLOCK_COUNT_Y) * block.size.y}
        block.fill_color = SF::Color::Red
        block.outline_color = SF::Color::Blue
        block.outline_thickness = 1
      end
      # Ball
      @ball = Ball.new BALL_SIZE
      @ball.fill_color = SF::Color.new(120, 0, 10)
      @ball.position = {(WINDOW_SIZE_X - BALL_SIZE * 2) / 2, WINDOW_SIZE_Y - MARGIN_BOTTOM - PLAYER_SIZE_Y - BALL_SIZE * 2}
    end

    def draw(target : SF::RenderTarget, states : SF::RenderStates)
      # Move Player
      @player.move(PLAYER_SPEED, 0) if SF::Keyboard.key_pressed?(SF::Keyboard::Right) && @player.position.x <= WINDOW_SIZE_X - PLAYER_SIZE_X
      @player.move(-PLAYER_SPEED, 0) if SF::Keyboard.key_pressed?(SF::Keyboard::Left) && @player.position.x > 0
      # Collison Player
      @ball.direction = (@ball.direction + 90) % 360 if @ball.global_bounds.intersects?(@player.global_bounds)
      # Collison Wall
      @ball.direction = (@ball.direction + 90) % 360 if @ball.position.x <= 0 || @ball.position.x >= WINDOW_SIZE_X - BALL_SIZE*2 || @ball.position.y >= WINDOW_SIZE_Y - BALL_SIZE*2 || @ball.position.y <= 0
      # Block collision
      @blocks.each do |block|
        if @ball.global_bounds.intersects?(block.global_bounds) && !block.destroyed
          block.destroyed = true
          @ball.direction = (@ball.direction + 90) % 360
        end
        # Draw Blocks
        target.draw(block) unless block.destroyed
      end
      @ball.move(Math.cos(@ball.direction * (Math::PI/180))*BALL_VELOCITY, Math.sin(@ball.direction * (Math::PI/180))*BALL_VELOCITY)
      target.draw @ball
      target.draw @player
    end
  end
end
